(define (make-first-unbound var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (set! vars (cdr vars))
             (set! vals (cdr vals))
             'true)
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      'false
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (make-all-unbound var env)
  (if (make-first-unbound var env)
    (make-all-unbound var (cdr env))
    'true))

(define (make-unbound var env #!optional scope)
  (if (or (equal? scope 'first) (equal? scope #!default))
    (make-all-unbound var env)
    (make-first-unbound var env)))
