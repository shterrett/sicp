(define (handle-variables var val env op)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (cond ((or (equal? op 'set!) (equal? op 'define!))
                    (set-car! vals val))
                   ((equal? op 'lookup) (car vals))))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable --SET!" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define (lookup-variable-value var env)
  (handle-variables var '() env 'lookup))

(define (set-variable-value! var val env)
  (handle-variables var val env 'set!))

(define (define-variable! var val env)
  (handle-variables var val (list (car env)) 'define!))
