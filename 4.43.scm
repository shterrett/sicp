(define (daughter l) (car l))
(define (yacht l) (cadr l))

(define (yachts)
  (let ((daughter-names (list 'mary-ann 'gabrielle 'lorna 'rosalind 'melissa)))
    (let ((moore-daughter 'mary-ann)
          (moore-yacht 'lorna)
          (downing-daughter (amb daughter-names))
          (downing-yacht 'melissa)
          (hall-daughter (amb daughter-names))
          (hall-yacht 'rosalind)
          (hood-daughter 'melissa)
          (hood-yacht 'gabrielle)
          (parker-daughter (amb daughter-names))
          (parker-yacht (amb daughter-names)))
      (require (not (= moore-daughter moore-yacht)))
      (require (not (= downing-daughter downing-yacht)))
      (require (not (= hall-daughter hall-yacht)))
      (require (not (= hood-daughter hood-yacht)))
      (require (not (= parker-daughter parker-yacht)))
      (require (not (= parker-daughter 'gabrielle)))
      (let ((father-daughter-yacht (list
                               (list 'moore moore-daughter moore-yacht)
                               (list 'downing downing-daughter downing-yacht)
                               (list 'hall hall-daughter hall-yacht)
                               (list 'hood hood-daughter hood-yacht)
                               (list 'parker parker-daughter parker-yacht))))
        (let ((gabrielles-father (filter (lambda (group)
                                           (= 'gabrielle (cadr group)))
                                         father-daughter-yacht)))
          (require (= (caaddr gabrielles-father) parker-daughter))
          (caar (filter (lambda (group)
                          (= 'lorna (cadr group)))
                        (father-daughter-yacht))))))))


