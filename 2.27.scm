(define (deep-reverse tree)
  (define (make-reverse forward-list reverse-list)
    (cond ((null? forward-list) reverse-list)
          ((list? (car forward-list)) (make-reverse (cdr forward-list)
                                                    (cons (deep-reverse (car forward-list))
                                                          reverse-list)))
          (else (make-reverse (cdr forward-list)
                              (cons (car forward-list)
                                    reverse-list)))))
  (make-reverse tree '()))

(define x (list 1 2 (list 3 4) 5))
(define y (list 1 2 (list 3 (list 4 5) 6) (list 7 8)))
(deep-reverse x)
(deep-reverse y)
