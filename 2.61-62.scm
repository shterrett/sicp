(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set)) #t)
        ((< x (car set)) #f)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
    '()
     (let ((x1 (car set1))
           (x2 (car set2)))
       (cond ((= x1 x2)
              (cons x1 (intersection-set (cdr set1)
                                         (cdr set2))))
             ((< x1 x2)
              (intersection-set (cdr set1)
                                set2))
             ((> x1 x2)
              (intersection-set set1
                                (cdr set2)))))))

(define (adjoin-set x set)
  (define (build-set new x original)
    (cond ((null? original) (append new (list x)))
          ((< (car original) x) (build-set (append new (list (car original)))
                                           x
                                           (cdr original)))
          ((= (car original) x) set)
          ((> (car original) x) (append new (list x) original))))
  (build-set '() x set))

(define (union-set set1 set2)
  (define (build-set union first second)
    (cond ((null? first) (append union second))
          ((null? second) union)
          ((< (car first) (car second)) (build-set (append union (list (car first)))
                                                (cdr first)
                                                second))
          ((= (car first) (car second)) (build-set (append union (list (car first)))
                                                (cdr first)
                                                (cdr second)))
          ((> (car first) (car second)) (build-set (append union (list (car second)))
                                                first
                                                (cdr second)))))
  (build-set '() set1 set2))

(define set (list 1 2 3 5 6))
(adjoin-set 3 set)
(adjoin-set 7 set)
(adjoin-set 4 set)

(define set2 (list 4 5 6 7 8))
(union-set set set2)

(define set3 (list 1 3 5 7 9))
(union-set set set3)
(union-set set2 set3)
