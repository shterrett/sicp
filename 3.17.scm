(define (count-pairs x)
  (define counted '())
    (define (already-counted? x already-counted)
      (cond ((eq? already-counted '()) #f)
            ((eq? x (car already-counted)) #t)
            (else (already-counted? x (cdr already-counted)))))
    (define (do-count x)
      (cond ((not (pair? x)) 0)
            ((not (already-counted? x counted)) (+ (do-count (car x))
                                                   (do-count (cdr x))
                                                   1)
                                                (append! counted x))
            (else (+ (do-count (car x))
                     (do-count (cdr x))))))
    (do-count x))

(count-pairs (cons 1 2))
